service: ${file(./package.json):name}
custom: ${file(./package.json)}
frameworkVersion: ">=1.2.0 <2.0.0"

package:
  exclude:
    - node_modules/**

plugins:
  - sync
  - invalidate

provider:
  name: aws
  runtime: nodejs4.3
  stage: production
  region: us-east-1

resources:
  Resources:
    ## SSL Certificate
    WebAppCertificate:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${self:custom.homepage}
        DomainValidationOptions:
          - DomainName: ${self:custom.homepage}
            ValidationDomain: ${self:custom.homepage}
    ## Specifying the S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.homepage}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.homepage}/*
    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.homepage}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
          Enabled: 'true'
          ## Uncomment the following section in case you are using a custom domain
          Aliases:
          - ${self:custom.homepage}
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            Compress: 'true'
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ## The origin id defined above
            TargetOriginId: WebApp
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            AcmCertificateArn:
              Ref: WebAppCertificate
            SslSupportMethod: sni-only
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix
    ## Create HostedZone
    HostedZone:
      Type: AWS::Route53::HostedZone
      Properties:
        Name: ${self:custom.homepage}
    ## Create RecordSetGroup
    RecordSetGroup:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId:
          'Ref': HostedZone
        RecordSets:
          ## CloudFront
          - Name: ${self:custom.homepage}
            Type: A
            AliasTarget:
              DNSName:
                'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]
              HostedZoneId: Z2FDTNDATAQYW2
          ## MX Records
          - Name: ${self:custom.homepage}
            Type: MX
            TTL: 3600
            ResourceRecords:
              - 10 in1-smtp.messagingengine.com.
              - 20 in2-smtp.messagingengine.com.
          ## TXT Records
          - Name: ${self:custom.homepage}
            Type: TXT
            TTL: 3600
            ResourceRecords:
              - '"v=spf1 include:spf.messagingengine.com ?all"'
          ## CNAME Records
          - Name: mesmtp._domainkey.${self:custom.homepage}
            Type: CNAME
            TTL: 3600
            ResourceRecords:
              - mesmtp.${self:custom.homepage}.dkim.fmhosted.com
          - Name: fm1._domainkey.${self:custom.homepage}
            Type: CNAME
            TTL: 3600
            ResourceRecords:
              - fm1.${self:custom.homepage}.dkim.fmhosted.com
          - Name: fm2._domainkey.${self:custom.homepage}
            Type: CNAME
            TTL: 3600
            ResourceRecords:
              - fm2.${self:custom.homepage}.dkim.fmhosted.com
          - Name: fm3._domainkey.${self:custom.homepage}
            Type: CNAME
            TTL: 3600
            ResourceRecords:
              - fm3.${self:custom.homepage}.dkim.fmhosted.com
  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]
